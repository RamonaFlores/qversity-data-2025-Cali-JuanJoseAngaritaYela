import pandas as pd
from .utils import build_metadata


def enrich_records(local_path: str, valid_records: list[dict], invalid_records: list[tuple]):
    """
        Enrich raw records with standardized metadata and return a single DataFrame.

        This helper merges *both* the schema-compliant records and the rejected
        ones into a unified structure.  Each record is passed through
        ``build_metadata`` to attach common audit fields (hash, UUID, load status,
        timestamps, etc.).  The resulting list of dictionaries is then converted
        into a pandas ``DataFrame`` that represents the full “Bronze” batch.

        Parameters
        ----------
        local_path : str
            Absolute or relative path of the source file on disk.  The value is
            forwarded to ``build_metadata`` so the *source_file_name* and other
            context fields are captured.
        valid_records : list[dict]
            Records that have already passed JSON-Schema validation.
        invalid_records : list[tuple[dict, str]]
            Tuples ``(record, error_message)`` produced by the validation phase
            for records that failed.  The error message is stored in the
            *validation_error* metadata field.

        Returns
        -------
        pandas.DataFrame
            A DataFrame where every row contains:
            * the original record in the **raw** column,
            * the full metadata generated by ``build_metadata``,
            * and a **record_validated** flag indicating success or failure.

        Example
        -------
        >>> bronze_df = enrich_records(
        ...     "/tmp/bronze/orders.json",
        ...     valid_records=good,
        ...     invalid_records=bad,
        ... )
        >>> bronze_df.head()
        """
    #Iterates over every dict on valid_records
    #calls the build metadata method 
    #and returns a list with the enriched valid records
    rows = [build_metadata(local_path, rec, True) for rec in valid_records] + [
        #Does the same thing but to the invalid records
        #It also includes the error in the key "validation_error"
        build_metadata(local_path, rec, False, err) for rec, err in invalid_records
    ]
    #Returns the unfiied dataframe
    return pd.DataFrame(rows)